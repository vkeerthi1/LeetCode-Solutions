package leedtcode.May.CW3;
/*
* 1309. Decrypt String from Alphabet to Integer Mapping
Easy

You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:

    Characters ('a' to 'i') are represented by ('1' to '9') respectively.
    Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.

Return the string formed after mapping.

The test cases are generated so that a unique mapping will always exist.



Example 1:

Input: s = "10#11#12"
Output: "jkab"
Explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".

Example 2:

Input: s = "1326#"
Output: "acz"

* */
public class Decrypt_String {
    public static void main(String[] args) {

        // Given array arr[]
        String s = "10#11#12";
        //System.out.print("---------------"+freqAlphabets(s));
        String s1 = "1326#";
        System.out.print("---------------"+freqAlphabets(s1));
    }
    public static  String freqAlphabets(String s) {
        StringBuilder output = new StringBuilder(); //used stringbuiled append b/c it's optimized

        for(int i = s.length()-1; i >= 0; i--){ //starts from last character, goes till first character

            if(s.charAt(i) == '#'){
                output.append((char)('a' + (s.charAt(i-1) -'0' ) + 10*(s.charAt(i-2)-'0') -1) );
                //using ascii, add 'a' to start from the alphabet, subtract '0' b/c currently the digits in the String s are chars

                i -= 2; //have skip 2 characters , b/c we already checked it in the above line
            } else {
                output.append((char)('a' + (s.charAt(i) - '0') -1));
            }
        }
        output.reverse(); //very helpful method, reverses the whole string

        return output.toString(); //convert StringBuilder obj to string
    }

}
